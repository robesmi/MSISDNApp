// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/robesmi/MSISDNApp/vault (interfaces: VaultInterface)

// Package vault is a generated GoMock package.
package vault

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVaultInterface is a mock of VaultInterface interface.
type MockVaultInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVaultInterfaceMockRecorder
}

// MockVaultInterfaceMockRecorder is the mock recorder for MockVaultInterface.
type MockVaultInterfaceMockRecorder struct {
	mock *MockVaultInterface
}

// NewMockVaultInterface creates a new mock instance.
func NewMockVaultInterface(ctrl *gomock.Controller) *MockVaultInterface {
	mock := &MockVaultInterface{ctrl: ctrl}
	mock.recorder = &MockVaultInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaultInterface) EXPECT() *MockVaultInterfaceMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockVaultInterface) Fetch(arg0 string, arg1 ...string) (map[string]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fetch", varargs...)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockVaultInterfaceMockRecorder) Fetch(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockVaultInterface)(nil).Fetch), varargs...)
}

// Insert mocks base method.
func (m *MockVaultInterface) Insert(arg0 string, arg1 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockVaultInterfaceMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockVaultInterface)(nil).Insert), arg0, arg1)
}
