// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/robesmi/MSISDNApp/service (interfaces: AuthService)

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/robesmi/MSISDNApp/model"
	dto "github.com/robesmi/MSISDNApp/model/dto"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// GetAllUsers mocks base method.
func (m *MockAuthService) GetAllUsers() (*[]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].(*[]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockAuthServiceMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockAuthService)(nil).GetAllUsers))
}

// LogOutUser mocks base method.
func (m *MockAuthService) LogOutUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOutUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogOutUser indicates an expected call of LogOutUser.
func (mr *MockAuthServiceMockRecorder) LogOutUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOutUser", reflect.TypeOf((*MockAuthService)(nil).LogOutUser), arg0)
}

// LoginImportedUser mocks base method.
func (m *MockAuthService) LoginImportedUser(arg0 string) (*dto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginImportedUser", arg0)
	ret0, _ := ret[0].(*dto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginImportedUser indicates an expected call of LoginImportedUser.
func (mr *MockAuthServiceMockRecorder) LoginImportedUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginImportedUser", reflect.TypeOf((*MockAuthService)(nil).LoginImportedUser), arg0)
}

// LoginNativeUser mocks base method.
func (m *MockAuthService) LoginNativeUser(arg0, arg1 string) (*dto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginNativeUser", arg0, arg1)
	ret0, _ := ret[0].(*dto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginNativeUser indicates an expected call of LoginNativeUser.
func (mr *MockAuthServiceMockRecorder) LoginNativeUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginNativeUser", reflect.TypeOf((*MockAuthService)(nil).LoginNativeUser), arg0, arg1)
}

// RefreshTokens mocks base method.
func (m *MockAuthService) RefreshTokens(arg0, arg1 string) (*dto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", arg0, arg1)
	ret0, _ := ret[0].(*dto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokens indicates an expected call of RefreshTokens.
func (mr *MockAuthServiceMockRecorder) RefreshTokens(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockAuthService)(nil).RefreshTokens), arg0, arg1)
}

// RegisterImportedUser mocks base method.
func (m *MockAuthService) RegisterImportedUser(arg0 string) (*dto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterImportedUser", arg0)
	ret0, _ := ret[0].(*dto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterImportedUser indicates an expected call of RegisterImportedUser.
func (mr *MockAuthServiceMockRecorder) RegisterImportedUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterImportedUser", reflect.TypeOf((*MockAuthService)(nil).RegisterImportedUser), arg0)
}

// RegisterNativeUser mocks base method.
func (m *MockAuthService) RegisterNativeUser(arg0, arg1, arg2 string) (*dto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNativeUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterNativeUser indicates an expected call of RegisterNativeUser.
func (mr *MockAuthServiceMockRecorder) RegisterNativeUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNativeUser", reflect.TypeOf((*MockAuthService)(nil).RegisterNativeUser), arg0, arg1, arg2)
}
